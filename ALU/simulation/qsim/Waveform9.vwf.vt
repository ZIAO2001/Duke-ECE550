// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/05/2023 19:01:22"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          mux_8_32
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module mux_8_32_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] in0;
reg [31:0] in1;
reg [31:0] in2;
reg [31:0] in3;
reg [31:0] in4;
reg [31:0] in5;
reg [31:0] in6;
reg [31:0] in7;
reg [2:0] sel;
// wires                                               
wire [31:0] out;

// assign statements (if any)                          
mux_8_32 i1 (
// port map - connection between master ports and signals/registers   
	.in0(in0),
	.in1(in1),
	.in2(in2),
	.in3(in3),
	.in4(in4),
	.in5(in5),
	.in6(in6),
	.in7(in7),
	.out(out),
	.sel(sel)
);
initial 
begin 
#1000000 $finish;
end 
// in0[ 31 ]
initial
begin
	in0[31] = 1'b0;
end 
// in0[ 30 ]
initial
begin
	in0[30] = 1'b0;
end 
// in0[ 29 ]
initial
begin
	in0[29] = 1'b1;
end 
// in0[ 28 ]
initial
begin
	in0[28] = 1'b1;
end 
// in0[ 27 ]
initial
begin
	in0[27] = 1'b0;
end 
// in0[ 26 ]
initial
begin
	in0[26] = 1'b0;
end 
// in0[ 25 ]
initial
begin
	in0[25] = 1'b0;
end 
// in0[ 24 ]
initial
begin
	in0[24] = 1'b0;
end 
// in0[ 23 ]
initial
begin
	in0[23] = 1'b1;
end 
// in0[ 22 ]
initial
begin
	in0[22] = 1'b0;
end 
// in0[ 21 ]
initial
begin
	in0[21] = 1'b0;
end 
// in0[ 20 ]
initial
begin
	in0[20] = 1'b1;
end 
// in0[ 19 ]
initial
begin
	in0[19] = 1'b1;
end 
// in0[ 18 ]
initial
begin
	in0[18] = 1'b1;
end 
// in0[ 17 ]
initial
begin
	in0[17] = 1'b0;
end 
// in0[ 16 ]
initial
begin
	in0[16] = 1'b0;
end 
// in0[ 15 ]
initial
begin
	in0[15] = 1'b1;
end 
// in0[ 14 ]
initial
begin
	in0[14] = 1'b1;
end 
// in0[ 13 ]
initial
begin
	in0[13] = 1'b0;
end 
// in0[ 12 ]
initial
begin
	in0[12] = 1'b1;
end 
// in0[ 11 ]
initial
begin
	in0[11] = 1'b1;
end 
// in0[ 10 ]
initial
begin
	in0[10] = 1'b0;
end 
// in0[ 9 ]
initial
begin
	in0[9] = 1'b0;
end 
// in0[ 8 ]
initial
begin
	in0[8] = 1'b0;
end 
// in0[ 7 ]
initial
begin
	in0[7] = 1'b1;
end 
// in0[ 6 ]
initial
begin
	in0[6] = 1'b0;
end 
// in0[ 5 ]
initial
begin
	in0[5] = 1'b0;
end 
// in0[ 4 ]
initial
begin
	in0[4] = 1'b0;
end 
// in0[ 3 ]
initial
begin
	in0[3] = 1'b0;
end 
// in0[ 2 ]
initial
begin
	in0[2] = 1'b0;
end 
// in0[ 1 ]
initial
begin
	in0[1] = 1'b1;
end 
// in0[ 0 ]
initial
begin
	in0[0] = 1'b1;
end 
// in1[ 31 ]
initial
begin
	in1[31] = 1'b1;
end 
// in1[ 30 ]
initial
begin
	in1[30] = 1'b1;
end 
// in1[ 29 ]
initial
begin
	in1[29] = 1'b0;
end 
// in1[ 28 ]
initial
begin
	in1[28] = 1'b0;
end 
// in1[ 27 ]
initial
begin
	in1[27] = 1'b0;
end 
// in1[ 26 ]
initial
begin
	in1[26] = 1'b1;
end 
// in1[ 25 ]
initial
begin
	in1[25] = 1'b0;
end 
// in1[ 24 ]
initial
begin
	in1[24] = 1'b1;
end 
// in1[ 23 ]
initial
begin
	in1[23] = 1'b0;
end 
// in1[ 22 ]
initial
begin
	in1[22] = 1'b0;
end 
// in1[ 21 ]
initial
begin
	in1[21] = 1'b1;
end 
// in1[ 20 ]
initial
begin
	in1[20] = 1'b0;
end 
// in1[ 19 ]
initial
begin
	in1[19] = 1'b1;
end 
// in1[ 18 ]
initial
begin
	in1[18] = 1'b1;
end 
// in1[ 17 ]
initial
begin
	in1[17] = 1'b1;
end 
// in1[ 16 ]
initial
begin
	in1[16] = 1'b0;
end 
// in1[ 15 ]
initial
begin
	in1[15] = 1'b1;
end 
// in1[ 14 ]
initial
begin
	in1[14] = 1'b1;
end 
// in1[ 13 ]
initial
begin
	in1[13] = 1'b1;
end 
// in1[ 12 ]
initial
begin
	in1[12] = 1'b1;
end 
// in1[ 11 ]
initial
begin
	in1[11] = 1'b1;
end 
// in1[ 10 ]
initial
begin
	in1[10] = 1'b1;
end 
// in1[ 9 ]
initial
begin
	in1[9] = 1'b0;
end 
// in1[ 8 ]
initial
begin
	in1[8] = 1'b1;
end 
// in1[ 7 ]
initial
begin
	in1[7] = 1'b1;
end 
// in1[ 6 ]
initial
begin
	in1[6] = 1'b0;
end 
// in1[ 5 ]
initial
begin
	in1[5] = 1'b1;
end 
// in1[ 4 ]
initial
begin
	in1[4] = 1'b0;
end 
// in1[ 3 ]
initial
begin
	in1[3] = 1'b1;
end 
// in1[ 2 ]
initial
begin
	in1[2] = 1'b1;
end 
// in1[ 1 ]
initial
begin
	in1[1] = 1'b0;
end 
// in1[ 0 ]
initial
begin
	in1[0] = 1'b0;
end 
// in2[ 31 ]
initial
begin
	in2[31] = 1'b1;
end 
// in2[ 30 ]
initial
begin
	in2[30] = 1'b1;
end 
// in2[ 29 ]
initial
begin
	in2[29] = 1'b1;
end 
// in2[ 28 ]
initial
begin
	in2[28] = 1'b0;
end 
// in2[ 27 ]
initial
begin
	in2[27] = 1'b1;
end 
// in2[ 26 ]
initial
begin
	in2[26] = 1'b0;
end 
// in2[ 25 ]
initial
begin
	in2[25] = 1'b1;
end 
// in2[ 24 ]
initial
begin
	in2[24] = 1'b0;
end 
// in2[ 23 ]
initial
begin
	in2[23] = 1'b1;
end 
// in2[ 22 ]
initial
begin
	in2[22] = 1'b1;
end 
// in2[ 21 ]
initial
begin
	in2[21] = 1'b1;
end 
// in2[ 20 ]
initial
begin
	in2[20] = 1'b0;
end 
// in2[ 19 ]
initial
begin
	in2[19] = 1'b0;
end 
// in2[ 18 ]
initial
begin
	in2[18] = 1'b1;
end 
// in2[ 17 ]
initial
begin
	in2[17] = 1'b1;
end 
// in2[ 16 ]
initial
begin
	in2[16] = 1'b0;
end 
// in2[ 15 ]
initial
begin
	in2[15] = 1'b1;
end 
// in2[ 14 ]
initial
begin
	in2[14] = 1'b0;
end 
// in2[ 13 ]
initial
begin
	in2[13] = 1'b0;
end 
// in2[ 12 ]
initial
begin
	in2[12] = 1'b0;
end 
// in2[ 11 ]
initial
begin
	in2[11] = 1'b1;
end 
// in2[ 10 ]
initial
begin
	in2[10] = 1'b0;
end 
// in2[ 9 ]
initial
begin
	in2[9] = 1'b0;
end 
// in2[ 8 ]
initial
begin
	in2[8] = 1'b0;
end 
// in2[ 7 ]
initial
begin
	in2[7] = 1'b0;
end 
// in2[ 6 ]
initial
begin
	in2[6] = 1'b1;
end 
// in2[ 5 ]
initial
begin
	in2[5] = 1'b1;
end 
// in2[ 4 ]
initial
begin
	in2[4] = 1'b0;
end 
// in2[ 3 ]
initial
begin
	in2[3] = 1'b1;
end 
// in2[ 2 ]
initial
begin
	in2[2] = 1'b0;
end 
// in2[ 1 ]
initial
begin
	in2[1] = 1'b1;
end 
// in2[ 0 ]
initial
begin
	in2[0] = 1'b0;
end 
// in3[ 31 ]
initial
begin
	in3[31] = 1'b0;
end 
// in3[ 30 ]
initial
begin
	in3[30] = 1'b0;
end 
// in3[ 29 ]
initial
begin
	in3[29] = 1'b1;
end 
// in3[ 28 ]
initial
begin
	in3[28] = 1'b0;
end 
// in3[ 27 ]
initial
begin
	in3[27] = 1'b0;
end 
// in3[ 26 ]
initial
begin
	in3[26] = 1'b0;
end 
// in3[ 25 ]
initial
begin
	in3[25] = 1'b0;
end 
// in3[ 24 ]
initial
begin
	in3[24] = 1'b0;
end 
// in3[ 23 ]
initial
begin
	in3[23] = 1'b0;
end 
// in3[ 22 ]
initial
begin
	in3[22] = 1'b1;
end 
// in3[ 21 ]
initial
begin
	in3[21] = 1'b0;
end 
// in3[ 20 ]
initial
begin
	in3[20] = 1'b1;
end 
// in3[ 19 ]
initial
begin
	in3[19] = 1'b0;
end 
// in3[ 18 ]
initial
begin
	in3[18] = 1'b0;
end 
// in3[ 17 ]
initial
begin
	in3[17] = 1'b1;
end 
// in3[ 16 ]
initial
begin
	in3[16] = 1'b0;
end 
// in3[ 15 ]
initial
begin
	in3[15] = 1'b0;
end 
// in3[ 14 ]
initial
begin
	in3[14] = 1'b1;
end 
// in3[ 13 ]
initial
begin
	in3[13] = 1'b1;
end 
// in3[ 12 ]
initial
begin
	in3[12] = 1'b0;
end 
// in3[ 11 ]
initial
begin
	in3[11] = 1'b0;
end 
// in3[ 10 ]
initial
begin
	in3[10] = 1'b1;
end 
// in3[ 9 ]
initial
begin
	in3[9] = 1'b0;
end 
// in3[ 8 ]
initial
begin
	in3[8] = 1'b0;
end 
// in3[ 7 ]
initial
begin
	in3[7] = 1'b0;
end 
// in3[ 6 ]
initial
begin
	in3[6] = 1'b0;
end 
// in3[ 5 ]
initial
begin
	in3[5] = 1'b0;
end 
// in3[ 4 ]
initial
begin
	in3[4] = 1'b0;
end 
// in3[ 3 ]
initial
begin
	in3[3] = 1'b1;
end 
// in3[ 2 ]
initial
begin
	in3[2] = 1'b1;
end 
// in3[ 1 ]
initial
begin
	in3[1] = 1'b1;
end 
// in3[ 0 ]
initial
begin
	in3[0] = 1'b1;
end 
// in4[ 31 ]
initial
begin
	in4[31] = 1'b0;
end 
// in4[ 30 ]
initial
begin
	in4[30] = 1'b1;
end 
// in4[ 29 ]
initial
begin
	in4[29] = 1'b1;
end 
// in4[ 28 ]
initial
begin
	in4[28] = 1'b1;
end 
// in4[ 27 ]
initial
begin
	in4[27] = 1'b1;
end 
// in4[ 26 ]
initial
begin
	in4[26] = 1'b1;
end 
// in4[ 25 ]
initial
begin
	in4[25] = 1'b0;
end 
// in4[ 24 ]
initial
begin
	in4[24] = 1'b0;
end 
// in4[ 23 ]
initial
begin
	in4[23] = 1'b0;
end 
// in4[ 22 ]
initial
begin
	in4[22] = 1'b0;
end 
// in4[ 21 ]
initial
begin
	in4[21] = 1'b1;
end 
// in4[ 20 ]
initial
begin
	in4[20] = 1'b1;
end 
// in4[ 19 ]
initial
begin
	in4[19] = 1'b0;
end 
// in4[ 18 ]
initial
begin
	in4[18] = 1'b0;
end 
// in4[ 17 ]
initial
begin
	in4[17] = 1'b0;
end 
// in4[ 16 ]
initial
begin
	in4[16] = 1'b1;
end 
// in4[ 15 ]
initial
begin
	in4[15] = 1'b1;
end 
// in4[ 14 ]
initial
begin
	in4[14] = 1'b0;
end 
// in4[ 13 ]
initial
begin
	in4[13] = 1'b0;
end 
// in4[ 12 ]
initial
begin
	in4[12] = 1'b0;
end 
// in4[ 11 ]
initial
begin
	in4[11] = 1'b0;
end 
// in4[ 10 ]
initial
begin
	in4[10] = 1'b1;
end 
// in4[ 9 ]
initial
begin
	in4[9] = 1'b1;
end 
// in4[ 8 ]
initial
begin
	in4[8] = 1'b0;
end 
// in4[ 7 ]
initial
begin
	in4[7] = 1'b0;
end 
// in4[ 6 ]
initial
begin
	in4[6] = 1'b0;
end 
// in4[ 5 ]
initial
begin
	in4[5] = 1'b1;
end 
// in4[ 4 ]
initial
begin
	in4[4] = 1'b1;
end 
// in4[ 3 ]
initial
begin
	in4[3] = 1'b1;
end 
// in4[ 2 ]
initial
begin
	in4[2] = 1'b1;
end 
// in4[ 1 ]
initial
begin
	in4[1] = 1'b0;
end 
// in4[ 0 ]
initial
begin
	in4[0] = 1'b0;
end 
// in5[ 31 ]
initial
begin
	in5[31] = 1'b1;
end 
// in5[ 30 ]
initial
begin
	in5[30] = 1'b0;
end 
// in5[ 29 ]
initial
begin
	in5[29] = 1'b1;
end 
// in5[ 28 ]
initial
begin
	in5[28] = 1'b0;
end 
// in5[ 27 ]
initial
begin
	in5[27] = 1'b0;
end 
// in5[ 26 ]
initial
begin
	in5[26] = 1'b0;
end 
// in5[ 25 ]
initial
begin
	in5[25] = 1'b0;
end 
// in5[ 24 ]
initial
begin
	in5[24] = 1'b0;
end 
// in5[ 23 ]
initial
begin
	in5[23] = 1'b1;
end 
// in5[ 22 ]
initial
begin
	in5[22] = 1'b0;
end 
// in5[ 21 ]
initial
begin
	in5[21] = 1'b0;
end 
// in5[ 20 ]
initial
begin
	in5[20] = 1'b0;
end 
// in5[ 19 ]
initial
begin
	in5[19] = 1'b1;
end 
// in5[ 18 ]
initial
begin
	in5[18] = 1'b0;
end 
// in5[ 17 ]
initial
begin
	in5[17] = 1'b1;
end 
// in5[ 16 ]
initial
begin
	in5[16] = 1'b0;
end 
// in5[ 15 ]
initial
begin
	in5[15] = 1'b0;
end 
// in5[ 14 ]
initial
begin
	in5[14] = 1'b0;
end 
// in5[ 13 ]
initial
begin
	in5[13] = 1'b0;
end 
// in5[ 12 ]
initial
begin
	in5[12] = 1'b1;
end 
// in5[ 11 ]
initial
begin
	in5[11] = 1'b0;
end 
// in5[ 10 ]
initial
begin
	in5[10] = 1'b1;
end 
// in5[ 9 ]
initial
begin
	in5[9] = 1'b1;
end 
// in5[ 8 ]
initial
begin
	in5[8] = 1'b0;
end 
// in5[ 7 ]
initial
begin
	in5[7] = 1'b1;
end 
// in5[ 6 ]
initial
begin
	in5[6] = 1'b0;
end 
// in5[ 5 ]
initial
begin
	in5[5] = 1'b1;
end 
// in5[ 4 ]
initial
begin
	in5[4] = 1'b1;
end 
// in5[ 3 ]
initial
begin
	in5[3] = 1'b1;
end 
// in5[ 2 ]
initial
begin
	in5[2] = 1'b1;
end 
// in5[ 1 ]
initial
begin
	in5[1] = 1'b0;
end 
// in5[ 0 ]
initial
begin
	in5[0] = 1'b0;
end 
// in6[ 31 ]
initial
begin
	in6[31] = 1'b1;
end 
// in6[ 30 ]
initial
begin
	in6[30] = 1'b0;
end 
// in6[ 29 ]
initial
begin
	in6[29] = 1'b1;
end 
// in6[ 28 ]
initial
begin
	in6[28] = 1'b1;
end 
// in6[ 27 ]
initial
begin
	in6[27] = 1'b0;
end 
// in6[ 26 ]
initial
begin
	in6[26] = 1'b1;
end 
// in6[ 25 ]
initial
begin
	in6[25] = 1'b1;
end 
// in6[ 24 ]
initial
begin
	in6[24] = 1'b0;
end 
// in6[ 23 ]
initial
begin
	in6[23] = 1'b0;
end 
// in6[ 22 ]
initial
begin
	in6[22] = 1'b1;
end 
// in6[ 21 ]
initial
begin
	in6[21] = 1'b0;
end 
// in6[ 20 ]
initial
begin
	in6[20] = 1'b0;
end 
// in6[ 19 ]
initial
begin
	in6[19] = 1'b1;
end 
// in6[ 18 ]
initial
begin
	in6[18] = 1'b0;
end 
// in6[ 17 ]
initial
begin
	in6[17] = 1'b1;
end 
// in6[ 16 ]
initial
begin
	in6[16] = 1'b0;
end 
// in6[ 15 ]
initial
begin
	in6[15] = 1'b1;
end 
// in6[ 14 ]
initial
begin
	in6[14] = 1'b0;
end 
// in6[ 13 ]
initial
begin
	in6[13] = 1'b1;
end 
// in6[ 12 ]
initial
begin
	in6[12] = 1'b1;
end 
// in6[ 11 ]
initial
begin
	in6[11] = 1'b0;
end 
// in6[ 10 ]
initial
begin
	in6[10] = 1'b0;
end 
// in6[ 9 ]
initial
begin
	in6[9] = 1'b1;
end 
// in6[ 8 ]
initial
begin
	in6[8] = 1'b0;
end 
// in6[ 7 ]
initial
begin
	in6[7] = 1'b0;
end 
// in6[ 6 ]
initial
begin
	in6[6] = 1'b0;
end 
// in6[ 5 ]
initial
begin
	in6[5] = 1'b0;
end 
// in6[ 4 ]
initial
begin
	in6[4] = 1'b1;
end 
// in6[ 3 ]
initial
begin
	in6[3] = 1'b1;
end 
// in6[ 2 ]
initial
begin
	in6[2] = 1'b1;
end 
// in6[ 1 ]
initial
begin
	in6[1] = 1'b1;
end 
// in6[ 0 ]
initial
begin
	in6[0] = 1'b0;
end 
// in7[ 31 ]
initial
begin
	in7[31] = 1'b0;
end 
// in7[ 30 ]
initial
begin
	in7[30] = 1'b1;
end 
// in7[ 29 ]
initial
begin
	in7[29] = 1'b0;
end 
// in7[ 28 ]
initial
begin
	in7[28] = 1'b1;
end 
// in7[ 27 ]
initial
begin
	in7[27] = 1'b1;
end 
// in7[ 26 ]
initial
begin
	in7[26] = 1'b1;
end 
// in7[ 25 ]
initial
begin
	in7[25] = 1'b0;
end 
// in7[ 24 ]
initial
begin
	in7[24] = 1'b0;
end 
// in7[ 23 ]
initial
begin
	in7[23] = 1'b1;
end 
// in7[ 22 ]
initial
begin
	in7[22] = 1'b1;
end 
// in7[ 21 ]
initial
begin
	in7[21] = 1'b1;
end 
// in7[ 20 ]
initial
begin
	in7[20] = 1'b1;
end 
// in7[ 19 ]
initial
begin
	in7[19] = 1'b1;
end 
// in7[ 18 ]
initial
begin
	in7[18] = 1'b0;
end 
// in7[ 17 ]
initial
begin
	in7[17] = 1'b1;
end 
// in7[ 16 ]
initial
begin
	in7[16] = 1'b0;
end 
// in7[ 15 ]
initial
begin
	in7[15] = 1'b0;
end 
// in7[ 14 ]
initial
begin
	in7[14] = 1'b0;
end 
// in7[ 13 ]
initial
begin
	in7[13] = 1'b0;
end 
// in7[ 12 ]
initial
begin
	in7[12] = 1'b1;
end 
// in7[ 11 ]
initial
begin
	in7[11] = 1'b1;
end 
// in7[ 10 ]
initial
begin
	in7[10] = 1'b1;
end 
// in7[ 9 ]
initial
begin
	in7[9] = 1'b0;
end 
// in7[ 8 ]
initial
begin
	in7[8] = 1'b0;
end 
// in7[ 7 ]
initial
begin
	in7[7] = 1'b1;
end 
// in7[ 6 ]
initial
begin
	in7[6] = 1'b0;
end 
// in7[ 5 ]
initial
begin
	in7[5] = 1'b1;
end 
// in7[ 4 ]
initial
begin
	in7[4] = 1'b0;
end 
// in7[ 3 ]
initial
begin
	in7[3] = 1'b1;
end 
// in7[ 2 ]
initial
begin
	in7[2] = 1'b0;
end 
// in7[ 1 ]
initial
begin
	in7[1] = 1'b1;
end 
// in7[ 0 ]
initial
begin
	in7[0] = 1'b0;
end 
// sel[ 2 ]
initial
begin
	sel[2] = 1'b0;
	sel[2] = #400000 1'b1;
	sel[2] = #400000 1'b0;
end 
// sel[ 1 ]
initial
begin
	repeat(2)
	begin
		sel[1] = 1'b0;
		sel[1] = #200000 1'b1;
		# 200000;
	end
	sel[1] = 1'b0;
end 
// sel[ 0 ]
always
begin
	sel[0] = 1'b0;
	sel[0] = #100000 1'b1;
	#100000;
end 
endmodule

